<?xml version="1.0" encoding="windows-1252" ?>
<project name="OrderBookingComposite" default="create-deployable-composite">
  
  <!-- master build.properties -->  
  <property file="../../bin/build.properties"/>

  <!-- import the property file -->
  <property file="sca-build.properties"/> 

  <!-- 
    this is for upwards compatibility, main line contains 2.5 while ps2 
    contains 2.0, we'll remove it at some point
  -->
  <condition property="spring.lib.path" 
    value="${oracle.common.home}/modules/org.springframework_2.0.jar"
    else="${oracle.common.home}/modules/org.springframework_2.5.jar">
      <available file="${oracle.common.home}/modules/org.springframework_2.0.jar"/>
  </condition>

  <echo>Spring lib path: ${spring.lib.path}</echo>

  <!-- ejb or jsca? -->  
  <condition property="local.partnersupplier.ejb.uri" 
      value="${partnersupplier.ejb.uri}"
      else="${partnersupplier.jsca.ejb.uri}">
      <or>
          <equals arg1="${use.jsca.ejb.impl}" arg2="false"/>
          <not>
              <isset property="use.jsca.ejb.impl"/>
          </not>
      </or>
  </condition>   
  <condition property="partnersupplier.ejb.uri.comment" 
      value="jndi name for normal ejb 3.0"
      else="jndi name for jsca based ejb binding">
      <or>
          <equals arg1="${use.jsca.ejb.impl}" arg2="false"/>
          <not>
              <isset property="use.jsca.ejb.impl"></isset>
          </not>
      </or>
  </condition>    

  <!-- classpath for spring libs and standalone testcase-->
  <path id="classpath">
    <pathelement location="${oracle.home}/../wlserver_10.3/server/lib/weblogic.jar"/>
    <pathelement location="${spring.lib.path}"/>
    <pathelement location="${oracle.common.home}/modules/org.apache.commons.logging_1.0.4.jar"/>
    <!-- needed for the ILogger bean - thanks vamsee! -->
    <pathelement location="${oracle.home}/soa/modules/oracle.soa.fabric_11.1.1/fabric-runtime.jar"/>  
    <pathelement location="${oracle.common.home}/modules/oracle.fabriccommon_11.1.1/fabric-common.jar"/>    
    <path location="${sca-inf.classes.dir}"/>
  </path>

  <!-- cleanup -->  
  <target name="clean">
    <property name="sca-inf.classes.dir" value="../SCA-INF/classes"/>
    <echo message="Deleting contents of ${sca-inf.classes.dir}"/>
    <delete dir="${sca-inf.classes.dir}" includeemptydirs="true" includes="*/**"/>
    <delete dir="${test.results.dir}" includeemptydirs="true" includes="*/**"/>
    <property name="deploy.composite.filename" 
        value="${deploy.dir}/sca_${composite.name}_rev${composite.revision}.jar"/>
    <echo message="Deleting ${deploy.composite.filename}"/>
    <delete file="${deploy.composite.filename}"/>
  </target>
 
  <target name="compile-classes">
    <mkdir dir="${sca-inf.classes.dir}"/>
    <javac destdir="${sca-inf.classes.dir}" classpathref="classpath"
           debug="on" nowarn="${javac.nowarn}"
           deprecation="${javac.deprecation}" encoding="Cp1252" source="1.6"
           target="1.6">
      <src path="${src.dir}"/>
    </javac>  
  </target> 
 
  <!-- create the composite -->
  <target name="create-deployable-composite" depends="compile-classes">
    <mkdir dir="${sca-inf.classes.dir}"/>
    <ant antfile="${oracle.home}/bin/ant-sca-package.xml" target="package" inheritall="false">
        <property name="oracle.home" value="${oracle.home}"/>
        <!-- we leverage the inbuilt scac -->
        <property name="compositeDir" value="${basedir}/../"/>
        <!-- needed for adf config -->
        <property name="scac.application.home" value="${basedir}/../.."/>
        <!-- name of the composite -->
        <property name="compositeName" value="${composite.name}"/>
        <!-- revision of the composite -->
        <property name="revision" value="${composite.revision}"/>
        <!-- input for scac -->
        <property name="java.passed.home" value="${java.home}"/>
    </ant>
    <antcall target="setupDeploymentEnvironment" inheritall="true"/>
  </target>
  
  <!-- 
    deploy the composite, this also creates the deployment plan based on
    the global use.jsca.ejb.impl property in the bin/build.properties
  -->
  <target name="deploy-composite" description="Deploy the partnersupplier composite">
    <condition property="deploymentplan.name" value="null">
       <not>
          <isset property="${deploymentplan.name}"/>
       </not>
    </condition>
    <!--
        although the deploy task can do this, somewhere is an issue with a relative path, hence using 
        the attachplan target directly
    -->
    <ant antfile="${oracle.home}/bin/ant-sca-compile.xml" target="attachplan" inheritall="false">
        <property name="oracle.home" value="${oracle.home}"/>
        <property name="java.passed.home" value="${java.home}"/>
        <property name="scac.input" value="../"/>
        <property name="scac.sar" value="${deploy.dir}/sca_${composite.name}_rev${composite.revision}.jar"/>
        <!-- configplan-->
        <property name="scac.plan" value="${basedir}/${deploymentplan.name}"/>
    </ant>
    
    <echo>Deploying to http://${managed.server.host}:${managed.server.port}/soa-infra/deployer</echo>
    <ant antfile="${oracle.home}/bin/ant-sca-deploy.xml" target="deploy" 
        inheritall="false" output="deployResult.dat">
        <!-- reformat of prop names -->
        <property name="user" value="${server.user}"/>
        <property name="password" value="${server.password}"/>
        <!-- create the url for deployment -->
        <property name="serverURL" value="http://${managed.server.host}:${managed.server.port}/soa-infra/deployer"/>
        <!-- location of the sar -->
        <property name="sarLocation" value="${deploy.dir}/sca_${composite.name}_rev${composite.revision}.jar"/>
        <!-- force overwrite if already there -->
        <property name="overwrite" value="true"/>
        <!-- partition name -->
        <property name="partition" value="${soa.partition.name}"/>        
    </ant>
    <loadfile property="deploylog" srcfile="deployResult.dat"></loadfile>
    <fail message="Deployment failed, please check above exception">
        <condition>
            <not>
                <contains string="${deploylog}" substring="200"/>
            </not>
        </condition>
    </fail>
    <delete file="deployResult.dat"/>        
  </target>
  
  <!-- undeploy the composite -->
  <target name="undeploy-composite" description="undeploy the partnersupplier composite">
    <ant antfile="${oracle.home}/bin/ant-sca-deploy.xml" target="undeploy" inheritall="false">
        <!-- reformat of prop names -->
        <property name="user" value="${server.user}"/>
        <property name="password" value="${server.password}"/>
        <!-- overwrite? -->
        <property name="overwrite" value="true"/>
        <!-- create the url for deployment -->
        <property name="serverURL" value="http://${managed.server.host}:${managed.server.port}/soa-infra/deployer"/>
        <!-- name of the composite -->
        <property name="compositeName" value="${composite.name}"/>
        <!-- revision of the composite -->
        <property name="revision" value="${composite.revision}"/>
        <!-- partition name -->
        <property name="partition" value="${soa.partition.name}"/>               
    </ant>
  </target>  

  <!-- test with composite tests -->  
  <target name="test-composite" depends="test-spring-classes" 
    description="test the composite, via sca-test and also via standalone spring">
    <echo>Running sca-testing for ${composite.name} against ${wls.mgd.server.url}</echo>
    <!-- api expects a file - so we create one on demand -->
    <property name="tmp.jndi.properties" value="${basedir}/tmp-jndi.properties"/>
    <echo file="${tmp.jndi.properties}">java.naming.factory.initial=${java.naming.factory.initial}
java.naming.provider.url=${wls.mgd.server.url}
java.naming.security.principal=${server.user}
java.naming.security.credentials=${server.password}
dedicated.connection=true
dedicated.rmicontext=true
    </echo>
    <delete file="${test.results.dir}/${testsuite.name}/antRun-TestFwk"/>
    <!-- count tests for eval -->
    <resourcecount property="count.tests">
        <fileset dir="${testsuites.dir}/${testsuite.name}/tests">
            <exclude name="fileList.xml"/>
        </fileset>
    </resourcecount>
    <echo message="Found ${count.tests} test(s) in ${testsuites.dir}/${testsuite.name}/tests"/>
    <ant antfile="${oracle.home}/bin/ant-sca-test.xml" 
        target="test" inheritall="false">
        <!-- connection information -->    
        <property name="oracle.home" value="${oracle.home}"/>
        <property name="java.passed.home" value="${java.home}"/>
        <!-- name of the composite -->
        <property name="scatest.input" value="${composite.name}"/>
        <!-- name of the testsuite -->
        <property name="scatestsuite.input" value="${testsuite.name}"/>
        <!-- api is bad, hence default ones -->
        <property name="jndi.properties.input" value="${tmp.jndi.properties}"/>
        <!-- result dir -->
        <property name="scatest.result" value="${test.results.dir}"/>
        <!-- partition name -->
        <property name="scatest.partition" value="${soa.partition.name}"/>        
    </ant>        
    <echo>Results written to: ${test.results.dir}</echo>
    <loadfile property="test.results" srcfile="${test.results.dir}/antRun-TestFwk.xml"/> 
    <!-- clean up beforehand -->
    <delete file="${tmp.jndi.properties}" />
    <fail message="Testoutput (${test.results.dir}/antRun-TestFwk.xml) does not contain ${count.tests} successes OR ${tests.expected.failures} failure(s)">
        <condition>
            <and>
                <not>
                    <and>
                        <contains string="${test.results}" 
                            substring="testCount=&quot;${count.tests}&quot;"/>
                        <contains string="${test.results}" 
                            substring="passCount=&quot;${count.tests}&quot;"/>
                    </and>
                </not>
                <!-- for some weird reason? sometimes the above one is off by one .. -->
                <not>
                    <and>
                        <contains string="${test.results}" 
                            substring="errorCount=&quot;${tests.expected.errors}&quot;"/>
                        <contains string="${test.results}" 
                            substring="failureCount=&quot;${tests.expected.failures}&quot;"/>
                    </and>
                </not>                    
             </and>
        </condition>
    </fail>
    <delete file="${test.results.dir}/antRun-TestFwk.xml}" />
  </target>

  <!-- Tests the standalone spring case, including ejbs, and error handling -->
  <target name="test-spring-classes" depends="compile-classes"
    description="test the assembly via spring context">
    <!-- copy the test spring context -->
    <copy file="../src/test-spring-context.xml" todir="${sca-inf.classes.dir}"
        overwrite="true"/>
    <echo>Testing ejb binding injection based on: ${local.partnersupplier.ejb.uri}</echo>
    <!-- create a tmp file with properties that spring can pick up -->
    <echo file="${sca-inf.classes.dir}/tmp_project.properties">java.naming.factory.initial=${java.naming.factory.initial}
java.naming.provider.url=${wls.mgd.server.url}
java.naming.security.principal=${server.user}
java.naming.security.credentials=${server.password}
dedicated.connection=true
dedicated.rmicontext=true
ejb.lookup.uri=${local.partnersupplier.ejb.uri}
spring.ejb.lookup.uri=IInternalCompositeSupplierService
    </echo>        
    <!-- tests the spring components -->    
    <java classpathref="classpath" 
            classname="com.otn.sample.fod.soa.TestSpringComponents"
            failonerror="true"/>
    <delete file="${sca-inf.classes.dir}/tmp_project.properties"/>
  </target>
  
  <!-- 
    setup of deploymentplan, in here we create the local deployment plan
    based on the use.jsca.ejb.impl flag
  -->
  <target name="setupDeploymentEnvironment" description="setup of the deployment environment">
    <property name="deployment.xml.file" value="${deploymentplan.name}"/>
    <copy file="templates/PartnerSupplierComposite_cfgplan.seed" 
        tofile="${deployment.xml.file}" overwrite="true"/>
    
    <echo>Setting up deployment plan, modifying ${deployment.xml.file} </echo>
    
    <echo message="Replacing ejb-name with ${local.partnersupplier.ejb.uri}"/>    
    <replace file="${deployment.xml.file}" 
        token="@PartnerSupplierEJBUri@" 
        value="${local.partnersupplier.ejb.uri}"/>
    <replace file="${deployment.xml.file}" 
        token="@comment@" 
        value="${partnersupplier.ejb.uri.comment}"/>
    <echo>Replacing file adapter endpoint with ${orderbooking.file.adapter.dir}/quote</echo>
    <replace file="${deployment.xml.file}" 
        token="@file.endpoint@" value="${orderbooking.file.adapter.dir}/quote"/>              
  </target>
  
</project>
