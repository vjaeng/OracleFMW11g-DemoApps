<?xml version="1.0" encoding="windows-1252" ?>
<!--Ant buildfile generated by Oracle JDeveloper-->
<!--Generated Sep 18, 2008 12:51:30 PM-->
<project name="OrderApprovalHumanTask" default="all" basedir=".">
  <!-- master build.properties -->
  <property file="../../bin/build.was.properties"/>
  <property file="build.properties"/>

  <property name="humanTask.dc.dir" value="${oracle.home}/soa/modules/oracle.soa.workflow_11.1.1" />
  <property name="humanTask.lib.dir" value="${oracle.home}/soa/modules/oracle.soa.worklist_11.1.1"/>
  
  <property name="app.name" value="FOD-${war.name}"/>
  
  <path id="was.classpath">
    <fileset dir="${was.home}/plugins">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${was.home}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <taskdef name="wsadmin" classname="com.ibm.websphere.ant.tasks.WsAdmin">
    <classpath refid="was.classpath"/>
  </taskdef>  
  
  <target name="init" depends="clean">
    <tstamp/>
    <mkdir dir="${output.dir}"/>
  </target>
  <target name="all" description="Build the project"
          depends="compile,copy"/>
  <target name="clean" description="Clean the project">
    <echo>Cleanup of OrderApprovalHumanTask</echo>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${output.dir}" includes="*/**"/>
      <fileset dir="${webinf.dir}/lib" includes="**/*"/>
      <fileset dir="${webinf.dir}/temp" includes="**/*"/>
    </delete>
    <delete file="${deploy.dir}/${war.name}.war"/>
    <delete file="${deploy.dir}/${war.name}.ear"/>
  </target>
  <target name="compile" description="Compile Java source files" depends="init">
    <javac destdir="${output.dir}"
           debug="${javac.debug}" 
           encoding="Cp1252" source="1.6"
           target="1.6">
      
      <src path="../src"/>
    </javac>
  </target>
  <target name="copy" description="Copy all files to output directory"
          depends="init" >
    <patternset id="copy.patterns">
      <include name="**/*.gif"/>
      <include name="**/*.jpg"/>
      <include name="**/*.jpeg"/>
      <include name="**/*.png"/>
      <include name="**/*.properties"/>
      <include name="**/*.xml"/>
      <include name="**/*-apf.xml"/>
      <include name="**/*.ejx"/>
      <include name="**/*.xcfg"/>
      <include name="**/*.cpx"/>
      <include name="**/*.dcx"/>
      <include name="**/*.sva"/>
      <include name="**/*.ini"/>
      <include name="**/*.tld"/>
      <include name="**/*.tag"/>
      <include name="**/*.xlf"/>
      <include name="**/*.wsdl"/>
      <include name="**/*.xsd"/>
    </patternset>
    <copy todir="${output.dir}">
      <fileset dir="../adfmsrc">
        <patternset refid="copy.patterns"/>
      </fileset>
      <fileset dir="../adfmsrc" includes="*.*"/>
      <fileset dir="..">
        <include name="services/**"/>
      </fileset>
    </copy>
  </target>

  <target name="create-ear" depends="compile, copy"
    description="Create the deployable ear archive, including amending connections.xml">
    <mkdir dir="${deploy.dir}"/>
    <property name="tmp.adf.dir" value="${deploy.dir}/adf"/>
    <property name="tmp.adfmeta.dir" value="${tmp.adf.dir}/META-INF"/>
    
    <copy todir="${webinf.dir}/lib">
        <fileset dir="${humanTask.lib.dir}" includes="adflibWorklistComponents.jar"/>
        <fileset dir="${humanTask.dc.dir}" includes="bpm-workflow-datacontrol.jar"/>
        
        <fileset dir="${oracle.common.home}/modules/oracle.javatools_11.1.1" includes="resourcebundle.jar"/>
        <fileset dir="${oracle.common.home}/modules/oracle.bali.share_11.1.1" includes="share.jar"/>
    </copy>
        
    <war basedir="${web.dir}" destfile="${deploy.dir}/${war.name}.war"
        webxml="${webinf.dir}/web.xml">
        <include name="*/**"/>
    </war>
    <delete dir="${webinf.dir}/lib" includeemptydirs="true" includes="*/**"/>
    <delete dir="${webinf.dir}/lib"/>

    <antcall target="setupDeploymentEnvironment" inheritall="true"/>
    
    <mkdir dir="${tmp.adfmeta.dir}"/>
    <copy todir="${tmp.adfmeta.dir}">
        <fileset dir="../../.adf/META-INF">
            <include name="*/**"/>
        </fileset>
    </copy>
    <echo>Creating custom adf config for customization of connections.xml - datasource: ${mds.local.datasource.jndi} </echo>
    <echo file="${tmp.adfmeta.dir}/adf-config.xml">&lt;?xml version="1.0" encoding="windows-1252" ?>
        &lt;adf-config xmlns="http://xmlns.oracle.com/adf/config">
          &lt;adf:adf-properties-child xmlns:adf="http://xmlns.oracle.com/adf/config/properties">
            &lt;adf-property name="adfAppUID" value="OrderApprovalHumanTask"/>
          &lt;/adf:adf-properties-child>
          &lt;adf-mds-config xmlns="http://xmlns.oracle.com/adf/mds/config">
            &lt;mds-config xmlns="http://xmlns.oracle.com/mds/config">
              &lt;persistence-config>
                &lt;metadata-namespaces>
                &lt;/metadata-namespaces>
                &lt;metadata-store-usages>
                 &lt;metadata-store-usage id="soa-infra-store" deploy-target="true" default-cust-store="true">
                    &lt;metadata-store class-name="oracle.mds.persistence.stores.db.DBMetadataStore">
                     &lt;property value="OrderApprovalHumanTask" name="partition-name"/>
                     &lt;property value="${mds.local.datasource.jndi}" name="jndi-datasource"/>
                    &lt;/metadata-store>
                  &lt;/metadata-store-usage>
                &lt;/metadata-store-usages>
              &lt;/persistence-config>
            &lt;/mds-config>
          &lt;/adf-mds-config>
        &lt;/adf-config> 
    </echo>
        
    <property name="tmp.ear.lib" value="${deploy.dir}/lib"/>
    <mkdir dir="${tmp.ear.lib}"/>

    <copy file="../lib/adf-loc.jar" todir="${tmp.ear.lib}"/>
    <!-- add the ibm deployment descriptor -->
    <copy file="./was/deployment.xml" todir="${deploy.dir}"/>

    <ear basedir="${deploy.dir}" appxml="../../src/META-INF/application.xml"
        destfile="${deploy.dir}/${war.name}.ear">
        <include name="${war.name}.war"/>
        <include name="adf/**"/>
        <include name="lib/*"/>
        <include name="*.xml"/>
        <fileset dir="../../src">
            <include name="*/**"/>
            <exclude name="META-INF/application.xml"/>
        </fileset>
    </ear>
    <delete dir="${tmp.adfmeta.dir}" includeemptydirs="true" includes="*/**"/>
    <delete dir="${tmp.adf.dir}" includeemptydirs="true" />
    
    <delete dir="${tmp.ear.lib}" includeemptydirs="true" includes="*/**"/>
    <delete dir="${tmp.ear.lib}"/>
  </target>
  
  <!-- use wsadmin to deploy the thing -->
  <target name="deploy-application" unless="skip.humanTask"
    depends="create-deploy-py"
    description="Deploy the OrderApprovalHumanTask ear to the server">

    <property name="user.install.root" location="${was.home}"/>
    <property name="wasinstall" location="${was.home}"/>
    <wsadmin script="create-deploy.py" 
             washome="${was.home}"
             conntype="SOAP" host="${admin.server.host}"
             port="${admin.server.port}"              
             user="${server.user}"
             password="${server.password}"
             failonerror="true"/> 
    <echo>Deployment of human task detail form complete</echo>         
    <delete file="create-deploy.py"/>                
  </target>    
  
  <!-- undeploy application -->
  <target name="undeploy-application" description="undeploy the app from the server">
    <wsadmin command="$AdminApp uninstall ${app.name}" 
             washome="${was.home}"
             conntype="SOAP" host="${admin.server.host}"
             port="${admin.server.port}"              
             user="${server.user}"
             password="${server.password}"
             failonerror="true"/> 
    <wsadmin command="$AdminConfig save" washome="${was.home}"
             conntype="SOAP" host="${admin.server.host}"
             port="${admin.server.port}"              
             user="${server.user}"
             password="${server.password}"
             failonerror="true"/>   
  </target>  
  
  <!-- setup of connections.xml -->
  <target name="setupDeploymentEnvironment">
    <property name="connections.xml" value="../../.adf/META-INF/connections.xml"/>
    <property name="connections.xml.seed" value="./templates/connections.xml.seed"/>
    <echo>Step1: copy template ${connections.xml.seed} to ${connections.xml}</echo>
    <copy file="${connections.xml.seed}" tofile="${connections.xml}" overwrite="true"/>
    
    <echo>Step2: setup descriptor, soa-only? ${soa.only.deployment}, modifying ${connections.xml} </echo>
    <!-- adf deployment -->
    <property name="storefrontservice.http.endpoint" 
        value="${managed.server.host}:${managed.server.port}"/>

    <condition property="storefrontservice.contextUri" 
        else="${storefrontservice.contextUri.soa}"
        value="${storefrontservice.contextUri.adf}">
          <equals arg1="${soa.only.deployment}" arg2="false" />
    </condition>
    <condition property="storefrontservice.ws.binding" 
        else="${storefrontservice.ws.binding.soa}"
        value="${storefrontservice.ws.binding.adf}">
          <equals arg1="${soa.only.deployment}" arg2="false" />
    </condition>

    <echo message="replacing ws-endpoint with ${storefrontservice.http.endpoint}/${storefrontservice.contextUri}"/>    
    <replace file="${connections.xml}" 
        token="@endpoint@" value="http://${storefrontservice.http.endpoint}/${storefrontservice.contextUri}"/>

    <echo message="replacing ws-binding with ${storefrontservice.ws.binding}"/>    
    <replace file="${connections.xml}" 
        token="@binding@" value="${storefrontservice.ws.binding}"/>  
  </target>

  <target name="create-deploy-py">
    <echo file="create-deploy.py"># install the application
import time
    
def installApp(crAppWAR, appName):

  # If the Application exists, then update it, otherwise install it	
  try:
   app = AdminApp.view(appName)
  except: 
   print "***** App not found: " + appName + ". Installing " +crAppWAR+ " now\n"
   options = "-appname " + appName + " -server ${server.targets} -node ${was.node} -cell ${was.cell} -contextroot /workflow/OrderApprovalHumanTask -defaultbinding.virtual.host default_host -usedefaultbindings -useAutoLink"
   AdminApp.install(crAppWAR, options)
   AdminConfig.save()
   print "\n***** Done installing App: " + appName + ". Config saved .."
  else:
   if app > 1:
     print "***** The App EXISTS: " + appName + ". Skipping...\n"
   #endif
#enddef

# start the application
def startApp(appName):

  # If the Application is already started then do not do anything.
  try:
    app = AdminControl.completeObjectName("type=Application,name=" + appName + ",*")
  except:
     print "***** The Application " + appName + " is already STARTED"
     return 0
     
  if len(app) > 1:
     print "***** The Application " + appName + " is already STARTED"
     return 0
  #endif
	
  # If the Application status is not Started, only then do the rest ...	
  #get the ApplicationManager MBean
  appMgr = AdminControl.queryNames("node=${was.node},type=ApplicationManager,process=" + srvr + ",*")
	
  #start the Application using the ApplicationManager MBean
  try:
    AdminControl.invoke(appMgr,'startApplication',appName)
    print "\n***** Started: " + appName
    return 0
  except:
    print "***** Retry start..."
    return 1
#enddef

# *********  MAIN SECTION  *********** #
# Global variables declaration
global AdminConfig
global AdminControl
global AdminApp
global AdminTask

nodeName = "${was.node}"
srvr = "${server.targets}"

crAppWAR = "${deploy.dir}/${war.name}.ear" 
crAppName = "${app.name}" # display name of the enterprise App

# functions for the deployment steps
installApp (crAppWAR,crAppName)  # Step 1 - Install FOD Human task App

for i in range(9):
  time.sleep(15)
  if startApp(crAppName) == 0: # Step 2 - Start FOD Human task app
    break
  #endif
#endfor
</echo>
  </target>

</project>
