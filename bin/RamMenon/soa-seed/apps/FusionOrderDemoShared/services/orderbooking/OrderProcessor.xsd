<?xml version="1.0" encoding="UTF-8"?> 
<schema attributeFormDefault="unqualified"
	elementFormDefault="qualified"
	targetNamespace="http://www.globalcompany.example.com/ns/OrderBookingService"
	xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:fod="/oracle/fodemo/storefront/store/queries/common/">
     <import namespace="/oracle/fodemo/storefront/store/queries/common/" 
        schemaLocation="../oracle/fodemo/storefront/store/queries/common/OrderItemsInfoVOSDO.xsd"/>
        <!-- The definition for the input -->
	<element name="process">
		<complexType>
			<sequence>
				<element name="orderId" type="string"/>
			</sequence>
		</complexType>
	</element>
        <!-- Definition of the good response -->
	<element name="processResponse">
		<complexType>
			<sequence>
				<element name="result" type="string"/>
			</sequence>
		</complexType>
	</element>
        
        <!-- in case a fault occurs -->
	<element name="orderProcessFault">
		<complexType>
			<sequence>
				<element name="code" type="string"/>
				<element name="detail" type="string"/>
				<element name="summary" type="string"/>
			</sequence>
		</complexType>
	</element>

        <!-- Internal event for updating an order event based -->
	<element name="updateOrderStatus">
		<complexType>
			<sequence>
				<element name="orderId" type="string" minOccurs="1"/>
				<element name="orderStatus" type="string" minOccurs="1"/>
			</sequence>
		</complexType>
	</element>
        
        <!-- CEP events for fraud checking -->
	<element name="orderInformationEvent">
		<complexType>
			<sequence>
				<element name="orderId" type="string"/>
				<element name="creditCardNumber" type="string"/>
				<element name="shipToId" type="string"/>
                                <element name="shipToName" type="string"/>
                                <element name="orderItems" 
                                    type="fod:OrderItemsInfoVOSDO" minOccurs="0" 
                                        maxOccurs="unbounded"/>
			</sequence>
		</complexType>
	</element>        
        
        <!-- event to signal continuation of the order -->
	<element name="continueOrderProcessingEvent">
		<complexType>
			<sequence>
				<element name="orderId" type="string"/>
                        </sequence>
                </complexType>        
        </element>
        
        <!-- event to signal continuation of the order -->
	<element name="stopOrderProcessingEvent">
		<complexType>
			<sequence>
				<element name="orderId" type="string"/>
                                <element name="fraudedOrderIds" type="string" 
                                    minOccurs="0" maxOccurs="unbounded"/>
                        </sequence>
                </complexType>        
        </element>

</schema>